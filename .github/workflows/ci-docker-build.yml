name: CI/CD - Test, Build & Publish

on:
  push:
    branches:
      - main 
  # Добавим для удобства, чтобы тестировать PR перед слиянием
  pull_request:
    branches:
      - main

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    # Обязательные разрешения для работы с реестром
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

        # НОВЫЙ ШАГ 2: Настройка Buildx Builder (Это исправит ошибку кэширования)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 1. Настройка Python
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip' 

      # 2. Установка зависимостей
      - name: Install dependencies
        run: pip install -r requirements.txt

      # 3. Запуск тестов
      - name: Run Pytest Tests
        run: pytest
        
      # --- ШАГИ CD (ПУБЛИКАЦИЯ) ---

      # 4. Аутентификация в GitHub Container Registry (GHCR)
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # Использует ваше имя пользователя GitHub
          username: ${{ github.actor }} 
          # Использует токен, который вы сохранили в Secrets
          password: ${{ secrets.DOCKER_PUSH_TOKEN }} 

      # 5. Определяем имя образа и тег
      - name: Set up Image Tag
        id: meta
        run: |
          # ВАЖНО: Используем github.repository_owner | lower для нижнего регистра
          REPO_OWNER_LOWERCASE=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')
          REPO_NAME_LOWERCASE=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]')
          
          # Формируем полный путь к реестру с именем в нижнем регистре
          REPO_PATH="ghcr.io/${REPO_OWNER_LOWERCASE}/${REPO_NAME_LOWERCASE}"
          
          # Формируем теги: по SHA коммита и 'latest'
          echo "IMAGE_TAG=${REPO_PATH}:$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
          echo "LATEST_TAG=${REPO_PATH}:latest" >> $GITHUB_ENV

      # 6. Собираем и пушим образ
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_TAG }}
            ${{ env.LATEST_TAG }}
          cache-from: type=gha 
          cache-to: type=gha,mode=max